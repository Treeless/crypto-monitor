<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" lang="en" />
  <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
  <script src="https://code.highcharts.com/stock/highstock.js"></script>
  <script src="https://code.highcharts.com/stock/modules/exporting.js"></script>
  <script src="js/moment.js"></script>
  <script>
  $.getJSON('/dates.json', function(dates) {


    $.getJSON('/charts.json', function(chartData) {

      $('#main-container').bind('mousemove touchmove touchstart', function(e) {
        var chart,
          point,
          i,
          event;

        for (i = 0; i < Highcharts.charts.length; i = i + 1) {
          chart = Highcharts.charts[i];
          // Find coordinates within the chart
          event = chart.pointer.normalize(e.originalEvent);
          // Get the hovered point
          point = chart.series[0].searchPoint(event, true);

          if (point) {
            point.highlight(e);
          }
        }
      });
      /**
       * Override the reset function, we don't need to hide the tooltips and
       * crosshairs.
       */
      Highcharts.Pointer.prototype.reset = function() {
        return undefined;
      };

      /**
       * Highlight a point by showing tooltip, setting hover state and draw crosshair
       */
      Highcharts.Point.prototype.highlight = function(event) {
        event = this.series.chart.pointer.normalize(event);
        this.onMouseOver(); // Show the hover marker
        this.series.chart.tooltip.refresh(this); // Show the tooltip
        this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
      };

      /**
       * Synchronize zooming through the setExtremes event handler.
       */
      function syncExtremes(e) {
        var thisChart = this.chart;

        if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
          Highcharts.each(Highcharts.charts, function(chart) {
            if (chart !== thisChart) {
              if (chart.xAxis[0].setExtremes) { // It is null while updating
                chart.xAxis[0].setExtremes(
                  e.min,
                  e.max,
                  undefined,
                  false, { trigger: 'syncExtremes' }
                );
              }
            }
          });
        }
      }

      //MAIN PRICES CHART
      var chart = Highcharts.chart('prices-chart-div', {
        xAxis: {
          type: 'datetime'
        },
        plotOptions: {
          line: {
            marker: {
              enabled: false
            }
          }
        },
        title: {
          text: 'Price of Bitcoin'
        },
        exporting: { enabled: false },
        series: [{
          name: 'USD Price',
          data: chartData.prices,
          tooltip: {
            valueDecimals: 2
          }
        }]
      });

      //SENTIMENT CHARTS
      chart = Highcharts.chart('tbpolarity-chart-div', {
        xAxis: {
          type: 'datetime'
        },
        yAxis: { allowDecimals: Boolean },
        plotOptions: {
          line: {
            marker: {
              enabled: false
            }
          }
        },
        title: {
          text: 'Sentiment: TextBlob'
        },
        exporting: { enabled: false },
        series: [{
          name: "polarity",
          data: chartData.tbpol,
          tooltip: {
            valueDecimals: 4
          }
        }]
      });

      chart = Highcharts.chart('vader-chart-div', {
        xAxis: {
          type: 'datetime'
        },
        plotOptions: {
          line: {
            marker: {
              enabled: false
            }
          }
        },
        yAxis: {
          allowDecimals: Boolean
        },
        title: {
          text: 'Sentiment: Vader'
        },
        exporting: { enabled: false },
        series: [{
          name: 'Polarity',
          data: chartData.vader,
          tooltip: {
            valueDecimals: 4
          }
        }]
      });

      //Percent changes in price charts
      chart = Highcharts.chart('pch1hr-chart-div', {
        xAxis: {
          type: 'datetime'
        },
        plotOptions: {
          line: {
            marker: {
              enabled: false
            }
          }
        },
        title: {
          text: 'Percent Change Price: 1 HR'
        },
        exporting: { enabled: false },
        series: [{
          name: 'Percent',
          data: chartData.pch1hr,
          tooltip: {
            valueDecimals: 2
          }
        }]
      });

      chart = Highcharts.chart('pch24hr-chart-div', {
        xAxis: {
          type: 'datetime'
        },
        plotOptions: {
          line: {
            marker: {
              enabled: false
            }
          }
        },
        title: {
          text: 'Percent Change Price: 24HR'
        },
        exporting: { enabled: false },
        series: [{
          name: 'Percent',
          data: chartData.pch24hr,
          tooltip: {
            valueDecimals: 2
          }
        }]
      });

    });
  });
  </script>
  <link href="/css/main.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <header>
    <div id="crypto-sense-logo-container">
      <img src="crypto-sense-header.png" />
    </div>
    <div id="links-container">
      <ul>
        <li><a href="http://www.twitter.com/cryptosensebot">@CryptoSenseBot</a></li>
        <li><a href="http://www.github.com/Treeless/crypto-monitor">Github: Website</a></li>
        <li><a href="http://www.github.com/Treeless/Bitsense">Github: Twitter Bot</a></li>
        <li><a href="http://www.github.com/MichaelDragan/Smsa">Github: Prediction Model</a></li>
      </ul>
    </div>
  </header>
  <div id="main-container">
    <div id="prices-chart-div"></div>
    <div id="tbpolarity-chart-div" class="chart"></div>
    <div id="vader-chart-div" class="chart"></div>
    <div id="pch1hr-chart-div" class="chart"></div>
    <div id="pch24hr-chart-div" class="chart"></div>
  </div>
</body>

</html>